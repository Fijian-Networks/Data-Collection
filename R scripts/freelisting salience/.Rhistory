library(AnthroTools)
install_github('alastair-JL/AnthroTools')
library(AnthroTools)
library("devtools")
library("AnthroTools")
getwd()
setwd("/Users/admin/Documents/SHAVER_NETWORK/odkX/R_testing/freelisting")
read.csv2("/test_suite/data_unformated.csv")
getwd()
read.csv2(/test_suite/data_unformated.csv)
read.csv2(test_suite/data_unformated.csv)
read.csv2("test_suite/data_unformated.csv")
file.path()
ls
getwd()
csvtest => getwd() + "/test_suite/data_unformatted.csv"
csvtest = getwd() + "/test_suite/data_unformatted.csv"
csvtest <= getwd() + "/test_suite/data_unformatted.csv"
csvtest <- getwd() + "/test_suite/data_unformatted.csv"
csvtest <- "/test_suite/data_unformatted.csv"
read.csv2("test_suite/data_unformated.csv")
read.csv2("test_suite/data_unformatted.csv")
testCsv <- read.csv2("test_suite/data_unformatted.csv")
View(testCsv)
testCsv <- read.csv2("test_suite/data_unformatted.csv")
testCsv <- read.csv("test_suite/data_unformatted.csv")
View(testCsv)
class(testCsv)
# read in CSV
test_csv <- read.csv("test_suite/data_unformatted.csv")
rm(ls)
rm(l(ls))
View(testCsv)
rm()
rm(test_csv)
rm(testCsv)
rm(csvtest)
# read in CSV
test_csv <- read.csv("test_suite/data_unformatted.csv")
library("tidyverse")
# read in CSV
test_csv <- read.csv("test_suite/data_unformatted.csv")
# read in CSV
test_csv <- as.tibble(read.csv("test_suite/data_unformatted.csv"))
# read in CSV
test_csv <- as_tibble(read.csv("test_suite/data_unformatted.csv"))
View(test_csv)
select(test_csv, "X_*")
select(test_csv, grep("X_"))
test_csv %>% filter(substr("X", 1))
test_csv %>% filter(substr("X", 1, 1))
test_csv %>% filter(substr("X", 1, 1) != 1)
filtered_csv <- test_csv %>% filter(substr("X", 1, 1) != 1)
View(filtered_csv)
filtered_csv <- test_csv %>% filter(substr("X", 1, 1) == 1)
filtered_csv <- test_csv %>% filter(substr("X", 1, 1) != 1)
rm(filtered_csv)
arrange(test_csv)
# read in CSV
test_csv <- arrange(as_tibble(read.csv("test_suite/data_unformatted.csv")))
View(test_csv)
select(test_csv, contains("X_"))
filter(test_csv, contains("X_"))
select(test_csv, contains("X_"))
select(test_csv, -c(contains("X_"))
)
select(test_csv, -c(contains("X_")))
# filter out default columns starting with X_
filtered_csv <- select(test_csv, -c(contains("X_")))
View(filtered_csv)
View(filtered_csv)
gather(filtered_csv, "id")
gather(filtered_csv, "id", "id")
gather(filtered_csv, "id", "item_listed_01":"item_listed_10")
gather(filtered_csv, "id", "item_listed_01":"item_listed_10")
gather(filtered_csv, "item_order")
help('anthrotools')
library("devtools")
library("tidyverse")
library("AnthroTools")
help('anthrotools')
help('AnthroTools')
fakeData <- GenerateFakeFreeListData()
View(fakeData)
##########
# Reformat csv from odk-x default to anthotools freelisting style
##########
setwd("/Users/admin/Documents/SHAVER_NETWORK/odkX/R_testing/freelisting")
# read in CSV
test_csv <- arrange(as_tibble(read.csv("test_suite/data_unformatted.csv")))
# filter out default columns starting with X_
filtered_csv <- select(test_csv, -c(contains("X_")))
View(filtered_csv)
View(fakeData)
# filter out default columns starting with X_
filtered_csv <- select(test_csv, -c(contains("X_"), "age", "gender", "location"))
# tidy the data into columns: id, order, item
tidyFreelist <- unite(filtered_csv, item_0 : item_10, col = "item")
# tidy the data into columns: id, order, item
tidyFreelist <- unite(filtered_csv, item_01 : item_10, col = "item")
View(tidyFreelist)
# tidy the data into columns: id, order, item
tidyFreelist <- gather(filtered_csv, item_01 : item_10, col = "item")
# tidy the data into columns: id, order, item
tidyFreelist <- gather(filtered_csv,key = "item" item_01 : item_10, col = "item")
source('~/Documents/SHAVER_NETWORK/odkX/R_testing/freelisting/init_use.R', echo=TRUE)
# tidy the data into columns: id, order, item
tidyFreelist <- gather(filtered_csv,key = "item", value = item_01 : item_10)
item <- c("a", 'b', 'c', "d", 'e', 'f')
id <- "1"
order <- c(1:6)
test.df <- data_frame(id, item,order)
View(test.df)
test.df <- tibble(id, item,order)
# tidy the data into columns: id, order, item
tidyFreelist <- gather(filtered_csv, key = "id", value = "item", item_00:item_10)
# tidy the data into columns: id, order, item
tidyFreelist <- gather(filtered_csv, key = "id", value = "item", item_01:item_10)
View(tidyFreelist)
# tidy the data into columns: id, order, item
tidyFreelist <- gather(filtered_csv, key = "order", value = "item", item_01:item_10)
tidyFreelist$order
tidyFreelist$order %-% '[a-z]'
tidyFreelist$order %>% gsub('[a-z]')
gsub('[a-z]', "", tidyFreelist$order)
gsub('[a-z_]', "", tidyFreelist$order)
tidyFreelist <-  gsub('[a-z_]', "", tidyFreelist$order)
tidyFreelist$order <-  gsub('[a-z_]', "", tidyFreelist$order)
tidyFreelist <-  as.numeric(gsub('[a-z_]', "", tidyFreelist$order))
as.numeric(gsub('[a-z_]', "", tidyFreelist$order))
# tidy the data into columns: id, order, item
tidyFreelist <- gather(filtered_csv, key = "order", value = "item", item_01:item_10)
as.numeric(gsub('[a-z_]', "", tidyFreelist$order))
tidyFreelist <- gather(filtered_csv, key = "order", value = "item", as.numeric(gsub('[a-z_]' , "", item_01:item_10)
tidyFreelist <- gather(filtered_csv, key = "order", value = "item", as.numeric(gsub('[a-z_]' , "", item_01:item_10))
tidyFreelist <- gather(filtered_csv, key = "order", value = "item", as.numeric(gsub('[a-z_]' , "", item_01:item_10)))
tidyFreelist <- gather(filtered_csv, key = "order", value = "item", as.numeric(gsub('[a-z_]' , "", filtered_csv$item_01:filtered_csv$item_10)))
View(tidyFreelist)
as.numeric(gsub('[a-z_]' , "", filtered_csv$item_01:filtered_csv$item_10))
as.numeric(gsub('[a-z_]' , "", filtered_csv$item_01:item_10))
# filter out default columns starting with X_, age, gender, location
# just leave ID and items
filtered_csv <- select(test_csv, -c(contains("X_"), "age", "gender", "location"))
# tidy the data into columns: id, order, item
tidyFreelist <- gather(filtered_csv, key = "order", value = "item", item_01:item_10)
View(tidyFreelist)
sub('[a-z_]', "", filtered_csv[,2:])
sub('[a-z_]', "", filtered_csv[],2:])
sub('[a-z_]', "", filtered_csv[,2:])
sub('[a-z_]', "", filtered_csv$2:)
filtered_csv$item*
filtered_csv$item
filtered_csv$item_
filtered_csv$item_*
filtered_csv$item_*
filtered_csv$item_*
sub('[a-z_]', "", filtered_csv[,2])
sub('[a-z_]', "", filtered_csv[,2:])
sub('[a-z_]', "", filtered_csv[,2]:)
sub('[a-z_]', "", filtered_csv[,2:])
sub('[a-z_]', "", filtered_csv[,2:10])
sub('[a-z_]', "", filtered_csv[,1:10])
sub('[a-z_]', "", filtered_csv[,])
sub('[a-z_]', "", filtered_csv[1,])
sub('[a-z_]', "", filtered_csv[2,])
sub('[a-z_]', "", filtered_csv[1,1])
sub('[a-z_]', "", filtered_csv[1,2])
sub('[a-z_]', "", filtered_csv[1,4])
filtered_csv[1,1]
filtered_csv[2,1]
filtered_csv[1,2]
filtered_csv[1,2:]
filtered_csv[1,2:10]
filtered_csv[1,2:11]
sub('[a-z_]', "", filtered_csv[1,2:11])
sub('[a-z_]', "", filtered_csv[,2:11])
# filter out default columns starting with X_, age, gender, location
# just leave ID and items
filtered_csv <- select(test_csv, -c(contains("X_"), "age", "gender", "location"))
sub('[a-z_]', "", filtered_csv[,2:11])
tidyFreelist <- sub('[a-z_]', "", filtered_csv[,2:11]) %>% gather(filtered_csv, key = "order", value = "item", item_01:item_10)
tidyFreelist <- sub('[a-z_]', "", filtered_csv[,2:11]) %>% gather(filtered_csv, key = "order", value = "item", 01:10)
colnames(test_csv)[which(names(test_csv) == "item_01")] <- 1
View(test_csv)
colnames(test_csv)[2]
cols <- c("id", 1:10)
newcolnames <- c("id", 1:10)
colnames(tidyFreelist) <- newcolnames
colnames(filtered_csv) <- newcolnames
View(filtered_csv)
# tidy the data into columns: id, order, item
tidyFreelist <- gather(filtered_csv, key = "order", value = "item", 01:10)
View(tidyFreelist)
# tidy the data into columns: id, order, item
tidyFreelist <- gather(filtered_csv, key = "order", value = "item", "1:10")
# tidy the data into columns: id, order, item
tidyFreelist <- gather(filtered_csv, key = "order", value = "item", filtered_csv[,2:])
# tidy the data into columns: id, order, item
tidyFreelist <- gather(filtered_csv, key = "order", value = "item", filtered_csv[,2:11])
# tidy the data into columns: id, order, item
tidyFreelist <- gather(filtered_csv, key = "order", value = "item", 1:10)
# filter out default columns starting with X_, age, gender, location
# just leave ID and items
filtered_csv <- select(test_csv, -c(contains("X_"), "age", "gender", "location"))
# change columns names item_01:item_10 to 1:10
newcolnames <- c("id", 1:10)
colnames(filtered_csv) <- newcolnames
# tidy the data into columns: id, order, item
tidyFreelist <- gather(filtered_csv, key = "order", value = "item", 1:10)
View(tidyFreelist)
View(filtered_csv)
# tidy the data into columns: id, order, item
tidyFreelist <- gather(filtered_csv, key = "order", value = "item", item_01:item_10)
filtered_csv
# tidy the data into columns: id, order, item
tidyFreelist <- gather(filtered_csv, key = "order", value = "item", '1':'10')
View(tidyFreelist)
# tidy the data into columns: id, order, item
tidyFreelist <- gather(filtered_csv, key = "order", value = "item", '1':'10')
View(tidyFreelist)
rm(list=())
rm(list=())
rm(list=ls())
# read in CSV
test_csv <- arrange(as_tibble(read.csv("test_suite/data_unformatted.csv")))
# filter out default columns starting with X_, age, gender, location
# just leave ID and items
filtered_csv <- select(test_csv, -c(contains("X_"), "age", "gender", "location"))
# change columns names item_01:item_10 to 1:10
newcolnames <- c("id", 1:10)
colnames(filtered_csv) <- newcolnames
# tidy the data into columns: id, order, item
tidyFreelist <- gather(filtered_csv, key = "order", value = "item", '1':'10')
View(tidyFreelist)
source('~/Documents/SHAVER_NETWORK/odkX/R_testing/freelisting/init_use.R')
View(filtered_csv)
# open CSV
freelist <- selectFile()
library("rstudioapi")
# open CSV
freelist <- selectFile()
# read in CSV
test_csv <- arrange(as_tibble(read.csv(freelist)))
View(test_csv)
# filter out default columns starting with X_, age, gender, location
# just leave ID and items
filtered_csv <- select(test_csv, -c(contains("X_"), "age", "gender", "location"))
# tidy the data into columns: id, order, item
tidyFreelist <- gather(freelist, key = "order", value = "item", '1':'10')
View(test_csv)
tidyFreelist <- gather(test_csv, key = "order", value = "item", '1':'10')
View(test_csv)
# open CSV
freelist <- selectFile()
# read in CSV
test_csv <- arrange(as_tibble(read.csv(freelist)))
# filter out default columns starting with X_, age, gender, location
# just leave ID and items
filtered_csv <- select(test_csv, -c(contains("X_"), "age", "gender", "location"))
# change columns names item_01:item_10 to 1:10
newcolnames <- c("id", 1:10)
colnames(filtered_csv) <- newcolnames
# tidy the data into columns: id, order, item
tidyFreelist <- gather(filtered_csv, key = "order", value = "item", '1':'10')
View(tidyFreelist)
unitCsv <- arrange(as_tibble(read.csv(freelist)))
View(unitCsv)
# open CSV
freelist <- selectFile()
unitCsv <- arrange(as_tibble(read.csv(freelist)))
View(unitCsv)
source('~/Documents/SHAVER_NETWORK/odkX/R_testing/freelisting/convertFreelist.R', echo=TRUE)
# change columns names item_01:item_10 to 1:10
newcolnames <- c("id", 1:10)
colnames(unitCsv) <- newcolnames
View(unitCsv)
tidyFreelist <- gather(unitCsvv, key = "order", value = "item", '1':'10')
tidyFreelist <- gather(unitCsv, key = "order", value = "item", '1':'10')
View(unitCsv)
tidyFreelist <- gather(unitCsv, key = "order", value = "item", '1':'10')
View(tidyFreelist)
tidyUnitCsv <- gather(unitCsv, key = "order", value = "item", '1':'10')
View(tidyUnitCsv)
data("FruitList")
View(FruitList)
FL <- CaculateSalience(FruitList)
FL <- CalculateSalience(FruitList)
View(FL)
# testing on coded csv with bais
freelistSalience <-CalculateSalience(unitCsv, Order = "Order", Subj = "id", CODE = "item", GROUPING = NA, Rescale= FALSE, Salience = "SScore")
# testing on coded csv with bais
freelistSalience <-CalculateSalience(as_data_frame(unitCsv), Order = "Order", Subj = "id", CODE = "item", GROUPING = NA, Rescale= FALSE, Salience = "SScore")
View(unitCsv)
View(tidyUnitCsv)
# testing on coded csv with bais
freelistSalience <-CalculateSalience(as_data_frame(tidyUnitCsv), Order = "Order", Subj = "id", CODE = "item", GROUPING = NA, Rescale= FALSE, Salience = "SScore")
class(tidyUnitCsv)
# testing on coded csv with bais
freelistSalience <-CalculateSalience(tidyUnitCsv, Order = "Order", Subj = "id", CODE = "item", GROUPING = NA, Rescale= FALSE, Salience = "SScore")
# testing on coded csv with bais
freelistSalience <-CalculateSalience(tidyUnitCsv, Order = "order", Subj = "id", CODE = "item", GROUPING = NA, Rescale= FALSE, Salience = "SScore")
View(tidyUnitCsv)
# testing on coded csv with bais
tucsv <- as_data_frame(tidyUnitCsv)
freelistSalience <-CalculateSalience(tuscv, Order = "order", Subj = "id", CODE = "item", GROUPING = NA, Rescale= FALSE, Salience = "SScore")
freelistSalience <-CalculateSalience(tucsv, Order = "order", Subj = "id", CODE = "item", GROUPING = NA, Rescale= FALSE, Salience = "SScore")
# testing on coded csv with bais
tucsv <- as_tibble(tidyUnitCsv)
freelistSalience <-CalculateSalience(tucsv, Order = "order", Subj = "id", CODE = "item", GROUPING = NA, Rescale= FALSE, Salience = "SScore")
View(unitCsv)
View(tidyUnitCsv)
tidyUnitCsv <- gather(unitCsv, key = "Order", value = "CODE", '1':'10')
View(tidyUnitCsv)
# change columns names item_01:item_10 to 1:10
newcolnames <- c("Subj", 1:10)
tidyUnitCsv <- gather(unitCsv, key = "Order", value = "CODE", '1':'10')
View(tidyUnitCsv)
# change columns names item_01:item_10 to 1:10
newcolnames <- c("Subj", 1:10)
###############
# testing from js script csv
unitCsv <- arrange(as_tibble(read.csv(freelist)))
colnames(unitCsv) <- newcolnames
tidyUnitCsv <- gather(unitCsv, key = "Order", value = "CODE", '1':'10')
View(unitCsv)
View(tidyUnitCsv)
# testing on coded csv with bais
tucsv <- as_tibble(tidyUnitCsv)
freelistSalience <-CalculateSalience(tucsv)
class(tucsv)
class(tidyUnitCsv)
data("FruitList")
test <- FruitList
test <- CalculateSalience(test)
class(test)
is.data.frame(tidyFreelist)
as_data_frame(tucsv)
df <- as_data_frame(tucsv)
class(df)
df = as.data.frame(tucsv)
class(df)
tidyUnitCsv <- as.data.frame(gather(unitCsv, key = "Order", value = "CODE", '1':'10'))
class(tidyUnitCsv)
# testing on coded csv with bais
tucsv <- tidyUnitCsv
freelistSalience <-CalculateSalience(tucsv)
View(freelistSalience)
warnings()
tidyFreelist$Order <- as.numeric()
tidyFreelist$Order <- as.numeric(tidyFreelist$Order)
tidyUnitCsv <- as.data.frame(gather(unitCsv, key = "Order", value = "CODE", '1':'10'))
tidyFreelist$Order <- as.numeric(tidyFreelist$Order)
as.numeric(as.character(tidyFreelist$Order))
###############
# testing from js script csv
unitCsv <- arrange(as_tibble(read.csv(freelist)))
colnames(unitCsv) <- newcolnames
tidyUnitCsv <- as.data.frame(gather(unitCsv, key = "Order", value = "CODE", '1':'10'))
as.numeric(as.character(tidyFreelist$Order))
View(tidyFreelist)
as.numeric(as.character(tidyFreelist$order))
tidyUnitCsv$order <-  as.numeric(as.character(tidyFreelist$order))
View(tidyUnitCsv)
tidyUnitCsv
rm(list=ls())
# open CSV
freelist <- selectFile()
# read in CSV
test_csv <- arrange(as_tibble(read.csv(freelist)))
# filter out default columns starting with X_, age, gender, location
# just leave ID and items
filtered_csv <- select(test_csv, -c(contains("X_"), "age", "gender", "location"))
# change columns names item_01:item_10 to 1:10
newcolnames <- c("Subj", 1:10)
###############
# testing from js script csv
unitCsv <- arrange(as_tibble(read.csv(freelist)))
colnames(unitCsv) <- newcolnames
tidyUnitCsv <- as.data.frame(gather(unitCsv, key = "Order", value = "CODE", '1':'10'))
tidyUnitCsv$order <-  as.numeric(as.character(tidyFreelist$order))
tidyUnitCsv$order <-  as.numeric(as.character(tidyUnitlist$order))
tidyUnitCsv$order <-  as.numeric(as.character(tidyUnitCsv$order))
tidyUnitCsv <- as.data.frame(gather(unitCsv, key = "Order", value = "CODE", '1':'10'))
tidyUnitCsv$order <-  as.numeric(as.character(tidyUnitCsv$order))
tidyUnitCsv$Order <-  as.numeric(as.character(tidyUnitCsv$order))
tidyUnitCsv$Order <-  as.numeric(as.character(tidyUnitCsv$Order))
View(tidyUnitCsv)
head(tidyUnitCsv)
class(tidyUnitCsv)
# testing on coded csv with bais
tucsv <- tidyUnitCsv
freelistSalience <-CalculateSalience(tucsv)
View(freelistSalience)
# filter out default columns starting with X_, age, gender, location
# just leave ID and items
filtered_csv <- select(test_csv, -c(contains("X_"), "age", "gender", "location"))
# Calc Salience
FL <-CalculateSalience(tucsv)
FL.S <- SalienceByCode(FL, dealWithDoubles = "MAX")
rm(list=ls())
# open CSV
FL <- selectFile()
# read in CSV
FL.csv.original <- arrange(as_tibble(read.csv(FL)))
# filter out default columns starting with X_, age, gender, location
# just leave ID and items
FL.csv.filtered <- select(FL.csv.original, -c(contains("X_"), "age", "gender", "location"))
# change columns names item_01:item_10 to 1:10
newcolnames <- c("Subj", 1:10)
colnames(FL.csv.filtered) <- newcolnames
# tidy the data into columns: id, order, item
FL.csv.tidy <- as.data.frame(gather(FL.csv.filtered, key = "Order", value = "Item", '1':'10'))
# Convert order column to numeric
FL.csv.tidy$Order <-  as.numeric(as.character(FL.csv.tidy$Order))
View(FL.csv.tidy)
FL.salience <- CalculateSalience(FL.csv.tidy)
# tidy the data into columns: id, order, item
FL.csv.tidy <- as.data.frame(gather(FL.csv.filtered, key = "Order", value = "CODe", '1':'10'))
# Convert order column to numeric
FL.csv.tidy$Order <-  as.numeric(as.character(FL.csv.tidy$Order))
FL.salience <- CalculateSalience(FL.csv.tidy)
# tidy the data into columns: id, order, item
FL.csv.tidy <- as.data.frame(gather(FL.csv.filtered, key = "Order", value = "CODE", '1':'10'))
# Convert order column to numeric
FL.csv.tidy$Order <-  as.numeric(as.character(FL.csv.tidy$Order))
FL.salience <- CalculateSalience(FL.csv.tidy)
# DealWithDoubles handles double ups in single id's choices, in case they list the same thing twice
FL.SBC <- SalienceByCode(FL.csv.tidy, dealWithDoubles = "MAX")
# DealWithDoubles handles double ups in single id's choices, in case they list the same thing twice
FL.salience.byCode <- SalienceByCode(FL.salience, dealWithDoubles = "MAX")
View(FL.salience.byCode)
###############
# testing from js script csv
freelistTest <- selectFile()
library("devtools")
library("tidyverse")
library("AnthroTools")
library("rstudioapi")
###############
# testing from js script csv
freelistTest <- selectFile()
unitCsv <- arrange(as_tibble(read.csv(freelistTest)))
colnames(unitCsv) <- newcolnames
tidyUnitCsv <- as.data.frame(gather(unitCsv, key = "Order", value = "CODE", '1':'10'))
tidyUnitCsv$Order <-  as.numeric(as.character(tidyUnitCsv$Order))
# Calc Salience
testFL <-CalculateSalience(tidyUnitCsv)
# DealWithDoubles handles double ups in single id's choices, in case they list the same thing twice
testFL.S <- SalienceByCode(FL, dealWithDoubles = "MAX")
View(testFL)
unitCsv <- arrange(as_tibble(read.csv(freelistTest)))
colnames(unitCsv) <- newcolnames
tidyUnitCsv <- as.data.frame(gather(unitCsv, key = "Order", value = "CODE", '1':'10'))
tidyUnitCsv$Order <-  as.numeric(as.character(tidyUnitCsv$Order))
# Calc Salience
testFL <-CalculateSalience(tidyUnitCsv)
View(testFL)
# DealWithDoubles handles double ups in single id's choices, in case they list the same thing twice
testFL.S <- SalienceByCode(FL, dealWithDoubles = "MAX")
# DealWithDoubles handles double ups in single id's choices, in case they list the same thing twice
testFL.S <- SalienceByCode(testFL, dealWithDoubles = "MAX")
View(testFL.S)
unitCsv <- arrange(as_tibble(read.csv(freelistTest)))
colnames(unitCsv) <- newcolnames
tidyUnitCsv <- as.data.frame(gather(unitCsv, key = "Order", value = "CODE", '1':'10'))
tidyUnitCsv$Order <-  as.numeric(as.character(tidyUnitCsv$Order))
# Calc Salience
testFL <-CalculateSalience(tidyUnitCsv)
# DealWithDoubles handles double ups in single id's choices, in case they list the same thing twice
testFL.S <- SalienceByCode(testFL, dealWithDoubles = "MAX")
View(testFL.S)
View(testFL)
# open CSV
FL <- selectFile()
# read in CSV
FL.csv.original <- arrange(as_tibble(read.csv(FL)))
# filter out default columns starting with X_, age, gender, location
# just leave ID and items
FL.csv.filtered <- select(FL.csv.original, -c(contains("X_"), "age", "gender"))
View(FL.csv.filtered)
# change columns names item_01:item_10 to 1:10
newcolnames <- c("Subj", 1:10, "location")
colnames(FL.csv.filtered) <- newcolnames
# tidy the data into columns: id, order, item
FL.csv.tidy <- as.data.frame(gather(FL.csv.filtered, key = "Order", value = "CODE", '1':'10'))
# Convert order column to numeric
FL.csv.tidy$Order <-  as.numeric(as.character(FL.csv.tidy$Order))
View(FL.csv.tidy)
FL.salience.villageGroup <-SalienceByCode(WL, dealWithDoubles = "MAX", GROUPING= "location")
source('~/Documents/SHAVER_NETWORK/odkX/R_testing/freelisting/convertFreelist.R', echo=TRUE)
FL.salience.villageGroup <-SalienceByCode(FL.salience, dealWithDoubles = "MAX", GROUPING= "location")
data(WorldList)
test<- CalculateSalience(WorldList,GROUPING="GROUPING")
View(test)
view(data("WorldList"))
t <- data("WorldLost")
t <- data("WorldList")
t
FL.salience.villageGroup <-SalienceByCode(FL.salience, dealWithDoubles = "MAX", GROUPING= "GROUPING")
FL.salience.villageGroup <-SalienceByCode(FL.salience, dealWithDoubles = "MAX", GROUPING= "location")
View(FL.salience)
View(FL.csv.tidy)
FL.salience.villageGroup <-SalienceByCode(FL.csv.tidy, dealWithDoubles = "MAX", GROUPING= "location")
# Grouping of location for salience
FL.salience.villageGroup <-SalienceByCode(FL.salience, dealWithDoubles = "MAX", GROUPING= "location")
View(FL.salience)
# Grouping of location for salience
FL.salience <- CalculateSalience(FL.csv.tidy, GROUPING = 'location')
# Grouping of location for salience
FL.salience.grouping <- CalculateSalience(FL.csv.tidy, GROUPING = 'location')
FL.salience.villageGroup <-SalienceByCode(FL.salience.grouping, dealWithDoubles = "MAX", GROUPING= "location")
rm(list=ls())
